/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package backtype.storm.generated;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SpoutSpec implements TBase<SpoutSpec, SpoutSpec._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("SpoutSpec");

  private static final TField SPOUT_OBJECT_FIELD_DESC = new TField("spout_object", TType.STRUCT, (short)1);
  private static final TField COMMON_FIELD_DESC = new TField("common", TType.STRUCT, (short)2);
  private static final TField DISTRIBUTED_FIELD_DESC = new TField("distributed", TType.BOOL, (short)3);

  private ComponentObject spout_object;
  private ComponentCommon common;
  private boolean distributed;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SPOUT_OBJECT((short)1, "spout_object"),
    COMMON((short)2, "common"),
    DISTRIBUTED((short)3, "distributed");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SPOUT_OBJECT
          return SPOUT_OBJECT;
        case 2: // COMMON
          return COMMON;
        case 3: // DISTRIBUTED
          return DISTRIBUTED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DISTRIBUTED_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SPOUT_OBJECT, new FieldMetaData("spout_object", TFieldRequirementType.REQUIRED, 
        new StructMetaData(TType.STRUCT, ComponentObject.class)));
    tmpMap.put(_Fields.COMMON, new FieldMetaData("common", TFieldRequirementType.REQUIRED, 
        new StructMetaData(TType.STRUCT, ComponentCommon.class)));
    tmpMap.put(_Fields.DISTRIBUTED, new FieldMetaData("distributed", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(SpoutSpec.class, metaDataMap);
  }

  public SpoutSpec() {
  }

  public SpoutSpec(
    ComponentObject spout_object,
    ComponentCommon common,
    boolean distributed)
  {
    this();
    this.spout_object = spout_object;
    this.common = common;
    this.distributed = distributed;
    set_distributed_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SpoutSpec(SpoutSpec other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.is_set_spout_object()) {
      this.spout_object = new ComponentObject(other.spout_object);
    }
    if (other.is_set_common()) {
      this.common = new ComponentCommon(other.common);
    }
    this.distributed = other.distributed;
  }

  public SpoutSpec deepCopy() {
    return new SpoutSpec(this);
  }

  @Deprecated
  public SpoutSpec clone() {
    return new SpoutSpec(this);
  }

  public ComponentObject get_spout_object() {
    return this.spout_object;
  }

  public void set_spout_object(ComponentObject spout_object) {
    this.spout_object = spout_object;
  }

  public void unset_spout_object() {
    this.spout_object = null;
  }

  /** Returns true if field spout_object is set (has been asigned a value) and false otherwise */
  public boolean is_set_spout_object() {
    return this.spout_object != null;
  }

  public void set_spout_object_isSet(boolean value) {
    if (!value) {
      this.spout_object = null;
    }
  }

  public ComponentCommon get_common() {
    return this.common;
  }

  public void set_common(ComponentCommon common) {
    this.common = common;
  }

  public void unset_common() {
    this.common = null;
  }

  /** Returns true if field common is set (has been asigned a value) and false otherwise */
  public boolean is_set_common() {
    return this.common != null;
  }

  public void set_common_isSet(boolean value) {
    if (!value) {
      this.common = null;
    }
  }

  public boolean is_distributed() {
    return this.distributed;
  }

  public void set_distributed(boolean distributed) {
    this.distributed = distributed;
    set_distributed_isSet(true);
  }

  public void unset_distributed() {
    __isset_bit_vector.clear(__DISTRIBUTED_ISSET_ID);
  }

  /** Returns true if field distributed is set (has been asigned a value) and false otherwise */
  public boolean is_set_distributed() {
    return __isset_bit_vector.get(__DISTRIBUTED_ISSET_ID);
  }

  public void set_distributed_isSet(boolean value) {
    __isset_bit_vector.set(__DISTRIBUTED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SPOUT_OBJECT:
      if (value == null) {
        unset_spout_object();
      } else {
        set_spout_object((ComponentObject)value);
      }
      break;

    case COMMON:
      if (value == null) {
        unset_common();
      } else {
        set_common((ComponentCommon)value);
      }
      break;

    case DISTRIBUTED:
      if (value == null) {
        unset_distributed();
      } else {
        set_distributed((Boolean)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SPOUT_OBJECT:
      return get_spout_object();

    case COMMON:
      return get_common();

    case DISTRIBUTED:
      return new Boolean(is_distributed());

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case SPOUT_OBJECT:
      return is_set_spout_object();
    case COMMON:
      return is_set_common();
    case DISTRIBUTED:
      return is_set_distributed();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SpoutSpec)
      return this.equals((SpoutSpec)that);
    return false;
  }

  public boolean equals(SpoutSpec that) {
    if (that == null)
      return false;

    boolean this_present_spout_object = true && this.is_set_spout_object();
    boolean that_present_spout_object = true && that.is_set_spout_object();
    if (this_present_spout_object || that_present_spout_object) {
      if (!(this_present_spout_object && that_present_spout_object))
        return false;
      if (!this.spout_object.equals(that.spout_object))
        return false;
    }

    boolean this_present_common = true && this.is_set_common();
    boolean that_present_common = true && that.is_set_common();
    if (this_present_common || that_present_common) {
      if (!(this_present_common && that_present_common))
        return false;
      if (!this.common.equals(that.common))
        return false;
    }

    boolean this_present_distributed = true;
    boolean that_present_distributed = true;
    if (this_present_distributed || that_present_distributed) {
      if (!(this_present_distributed && that_present_distributed))
        return false;
      if (this.distributed != that.distributed)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_spout_object = true && (is_set_spout_object());
    builder.append(present_spout_object);
    if (present_spout_object)
      builder.append(spout_object);

    boolean present_common = true && (is_set_common());
    builder.append(present_common);
    if (present_common)
      builder.append(common);

    boolean present_distributed = true;
    builder.append(present_distributed);
    if (present_distributed)
      builder.append(distributed);

    return builder.toHashCode();
  }

  public int compareTo(SpoutSpec other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SpoutSpec typedOther = (SpoutSpec)other;

    lastComparison = Boolean.valueOf(is_set_spout_object()).compareTo(typedOther.is_set_spout_object());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_spout_object()) {      lastComparison = TBaseHelper.compareTo(this.spout_object, typedOther.spout_object);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_common()).compareTo(typedOther.is_set_common());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_common()) {      lastComparison = TBaseHelper.compareTo(this.common, typedOther.common);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_distributed()).compareTo(typedOther.is_set_distributed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_distributed()) {      lastComparison = TBaseHelper.compareTo(this.distributed, typedOther.distributed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SPOUT_OBJECT
          if (field.type == TType.STRUCT) {
            this.spout_object = new ComponentObject();
            this.spout_object.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // COMMON
          if (field.type == TType.STRUCT) {
            this.common = new ComponentCommon();
            this.common.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // DISTRIBUTED
          if (field.type == TType.BOOL) {
            this.distributed = iprot.readBool();
            set_distributed_isSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.spout_object != null) {
      oprot.writeFieldBegin(SPOUT_OBJECT_FIELD_DESC);
      this.spout_object.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.common != null) {
      oprot.writeFieldBegin(COMMON_FIELD_DESC);
      this.common.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(DISTRIBUTED_FIELD_DESC);
    oprot.writeBool(this.distributed);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SpoutSpec(");
    boolean first = true;

    sb.append("spout_object:");
    if (this.spout_object == null) {
      sb.append("null");
    } else {
      sb.append(this.spout_object);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("common:");
    if (this.common == null) {
      sb.append("null");
    } else {
      sb.append(this.common);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("distributed:");
    sb.append(this.distributed);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (!is_set_spout_object()) {
      throw new TProtocolException("Required field 'spout_object' is unset! Struct:" + toString());
    }

    if (!is_set_common()) {
      throw new TProtocolException("Required field 'common' is unset! Struct:" + toString());
    }

    if (!is_set_distributed()) {
      throw new TProtocolException("Required field 'distributed' is unset! Struct:" + toString());
    }

  }

}

