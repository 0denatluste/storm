# Test ability to wire together shell spouts/bolts
---

# topology definition
# name to be used when submitting
name: "shell-topology"

# Components
# Components are analagous to Spring beans. They are meant to be used as constructor,
# property(setter), and builder arguments.
#components:
#  - id: "myComponent"
#    className: "com.foo.bar.MyComponent"
#    properties:
#      foo: "bar"
#      bar: "foo"

#components:
#  - id: shellSpoutArgs
#    value: ["node", "randomsentence.js"]
#
#  - id: shellBoltArgs
#    value: ["python", "splitsentence.py"]

# NOTE: We may want to consider some level of spring integration. For example, allowing component references
# to a spring `ApplicationContext`.

# topology configuration
# this will be passed to the submitter as a map of config options
#
config:
  topology.workers: 1
  # ...

# spout definitions
spouts:
  - id: "spout-1"
    className: "org.apache.storm.flux.spouts.GenericShellSpout"
    constructorArgs:
      - ["node", "randomsentence.js"]
    parallelism: 1
    # ...

# bolt definitions
bolts:
  - id: "bolt-1"
    className: "org.apache.storm.flux.bolts.GenericShellBolt"
    constructorArgs:
      - ["python", "splitsentence.py"]
    parallelism: 1
    # ...

  - id: "bolt-2"
    className: "org.apache.storm.flux.test.LogInfoBolt"
    parallelism: 1
    # ...

#stream definitions
# stream definitions define connections between spouts and bolts.
# note that such connections can be cyclical
streams:
  - name: "spout-1 --> bolt-1" # name isn't used (placeholder for logging, UI, etc.)
#    id: "connection-1"
    from: "spout-1"
    to: "bolt-1"
    grouping:
      type: fields
      args: ["word"]

  - name: "bolt-1 --> bolt2"
    from: "bolt-1"
    to: "bolt-2"
    grouping:
      type: shuffle







